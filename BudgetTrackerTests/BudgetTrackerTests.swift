//
//  BudgetTrackerTests.swift
//  BudgetTrackerTests
//
//  Created by –°–∞–º–∞—Ç –¢–∞–Ω–∫–µ–µ–≤ on 06.06.2025.
//

import Testing
import Foundation
@testable import BudgetTracker


struct BudgetTrackerTests {
    
    
    @Test
    func testParseValidTransaction() throws {
        let jsonObject: Any = [
            "id": 0,
            "amount": 1000,
            "comment": "–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
            "trasactionDate": "2025-06-01T10:34:56.789Z",
            "createdAt": "2025-06-01T10:34:56.789Z",
            "updatedAt": "2025-06-01T10:34:56.789Z",
            "account": [
                "id": 0,
                "userId": 0,
                "name": "–°–∞–º–∞—Ç",
                "balance": 20000,
                "currency": "RUB",
                "createdAt": "2025-06-10T12:34:56.789Z",
                "updatedAt": "2025-06-11T15:12:32.789Z"
            ],
            "category": [
                "id": 4,
                "name": "–ü—Ä–æ–¥—É–∫—Ç—ã",
                "emoji": "üç¨",
                "isIncome": false
            ]
        ]
        
        
        guard let transaction = Transaction.parse(jsonObject: jsonObject) else {
            #expect(Bool(false))
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ Transaction
        #expect(transaction.id == 0)
        #expect(transaction.amount == 1000)
        #expect(transaction.comment == "–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ Account
        #expect(transaction.account.id == 0)
        #expect(transaction.account.userId == 0)
        #expect(transaction.account.name == "–°–∞–º–∞—Ç")
        #expect(transaction.account.balance == 20000)
        #expect(transaction.account.currency == "RUB")
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ Category
        #expect(transaction.category.id == 4)
        #expect(transaction.category.name == "–ü—Ä–æ–¥—É–∫—Ç—ã")
        #expect(transaction.category.emoji == "üç¨")
        #expect(transaction.category.direction == .outcome)
    }
    
    
    @Test
    func testTransactionToJsonObject() throws {
        
        let transaction = createTransaction()
        guard let json = transaction.jsonObject as? [String: Any] else {
            #expect(Bool(false), "–ù–µ –≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è transaction")
            return
        }
        

        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ Transaction
        #expect(json["id"] as? Int == 1)
        #expect(json["amount"] as? Int == 3500)
        #expect(json["comment"] as? String == "–ö—É–ø–∏–ª –∫—É—à–∞—Ç—Ü")
        #expect(json["trasactionDate"] as? String == "2025-06-02T15:20:10.000Z")
        #expect(json["createdAt"] as? String == "2025-06-02T15:20:10.000Z")
        #expect(json["updatedAt"] as? String == "2025-06-02T15:20:10.000Z")
        
        guard let accountJson = json["account"] as? [String: Any] else {
            #expect(Bool(false), "–ù–µ –≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è account")
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ Account
        #expect(accountJson["id"] as? Int == 0)
        #expect(accountJson["userId"] as? Int == 0)
        #expect(accountJson["name"] as? String == "–°–∞–º–∞—Ç")
        #expect(accountJson["balance"] as? Int == 20000)
        #expect(accountJson["currency"] as? String == "RUB")
        #expect(accountJson["createdAt"] as? String == "2025-06-10T12:34:56.789Z")
        #expect(accountJson["updatedAt"] as? String == "2025-06-11T15:12:32.789Z")
        
        guard let categoryJson = json["category"] as? [String: Any] else {
            #expect(Bool(false), "category is missing or invalid")
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ Category
        #expect(categoryJson["id"] as? Int == 4)
        #expect(categoryJson["name"] as? String == "–ü—Ä–æ–¥—É–∫—Ç—ã")
        #expect(categoryJson["emoji"] as? String == "üç¨")
        #expect(categoryJson["isIncome"] as? Bool == false)
    }
    
    
    func createTransaction() -> Transaction {
        let account = BankAccount(id: 0,
                              userId: 0,
                              name: "–°–∞–º–∞—Ç",
                              balance: 20000,
                              currency: "RUB",
                              createdAt: DateStringConverter.getDate(from: "2025-06-10T12:34:56.789Z") ?? Date(),
                              updatedAt: DateStringConverter.getDate(from: "2025-06-11T15:12:32.789Z") ?? Date())
        
        let category =  Category(id: 4, name: "–ü—Ä–æ–¥—É–∫—Ç—ã", emoji: "üç¨", direction: .outcome)
        
        return Transaction(id: 1, account: account, category: category,
                           amount: 3500,
                           trasactionDate: DateStringConverter.getDate(from: "2025-06-02T15:20:10.000Z") ?? Date(),
                           comment: "–ö—É–ø–∏–ª –∫—É—à–∞—Ç—Ü",
                           createdAt: DateStringConverter.getDate(from: "2025-06-02T15:20:10.000Z") ?? Date(),
                           updatedAt: DateStringConverter.getDate(from: "2025-06-02T15:20:10.000Z") ?? Date())
    }
    
    
    @Test
    func testParseValidCSVTransaction() throws {
        let csvLine = """
        0,1000,–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤,2025-06-01T10:34:56.789Z,2025-06-01T10:34:56.789Z,2025-06-01T10:34:56.789Z,0,0,–°–∞–º–∞—Ç,20000,RUB,2025-06-10T12:34:56.789Z,2025-06-11T15:12:32.789Z,4,–ü—Ä–æ–¥—É–∫—Ç—ã,üç¨,false
        """
        
        guard let transaction = Transaction.parse(csvLine: csvLine) else {
            #expect(Bool(false), "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å CSV —Å—Ç—Ä–æ–∫—É")
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ Transaction
        #expect(transaction.id == 0)
        #expect(transaction.amount == 1000)
        #expect(transaction.comment == "–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        #expect(DateStringConverter.getStringUTC(from: transaction.trasactionDate) == "2025-06-01T10:34:56.789Z")
        #expect(DateStringConverter.getStringUTC(from: transaction.createdAt) == "2025-06-01T10:34:56.789Z")
        #expect(DateStringConverter.getStringUTC(from: transaction.updatedAt) == "2025-06-01T10:34:56.789Z")

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ Account
        let account = transaction.account
        #expect(account.id == 0)
        #expect(account.userId == 0)
        #expect(account.name == "–°–∞–º–∞—Ç")
        #expect(account.balance == 20000)
        #expect(account.currency == "RUB")
        #expect(DateStringConverter.getStringUTC(from: account.createdAt) == "2025-06-10T12:34:56.789Z")
        #expect(DateStringConverter.getStringUTC(from: account.updatedAt) == "2025-06-11T15:12:32.789Z")
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ Category
        let category = transaction.category
        #expect(category.id == 4)
        #expect(category.name == "–ü—Ä–æ–¥—É–∫—Ç—ã")
        #expect(category.emoji == "üç¨")
        #expect(category.direction == .outcome)
    }

    
    
    
    
    
    
    
}
