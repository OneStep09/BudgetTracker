//
//  TransactionsServiceMock.swift
//  BudgetTracker
//
//  Created by –°–∞–º–∞—Ç –¢–∞–Ω–∫–µ–µ–≤ on 18.07.2025.
//
import Foundation

final class TransactionsServiceMock: TransactionsService{
  
    
    private lazy var bankAccount = BankAccount(id: 0,
                                               userId: 0,
                                               name: "–û—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç",
                                               balance: 20000,
                                               currency: Currency.rub,
                                               createdAt: DateStringConverter.date(from: "2025-06-10T12:34:56.789Z") ?? Date(),
                                               updatedAt: DateStringConverter.date(from: "2025-06-11T15:12:32.789Z") ?? Date())
    private lazy var categories = [
        Category(id: 0, name: "–ê—Ä–µ–Ω–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã", emoji: "üè†", direction: .outcome),
        Category(id: 1, name: "–û–¥–µ–∂–¥–∞", emoji: "üëó", direction: .outcome),
        Category(id: 2, name: "–ù–∞ —Å–æ–±–∞—á–∫—É", emoji: "üêï", direction: .outcome),
        Category(id: 3, name: "–†–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã", emoji: "üî®", direction: .outcome),
        Category(id: 4, name: "–ü—Ä–æ–¥—É–∫—Ç—ã", emoji: "üç¨", direction: .outcome),
        Category(id: 5, name: "–°–ø–æ—Ä—Ç–∑–∞–ª", emoji: "üèãÔ∏è", direction: .outcome),
        Category(id: 6, name: "–ú–µ–¥–∏—Ü–∏–Ω–∞", emoji: "üíä", direction: .outcome),
        Category(id: 7, name: "–ê–ø—Ç–µ–∫–∞", emoji: "üíú", direction: .outcome),
        Category(id: 8, name: "–ú–∞—à–∏–Ω–∞", emoji: "üöó", direction: .outcome),
        Category(id: 9, name: "–ó–∞—Ä–ø–ª–∞—Ç–∞", emoji: "üíº", direction: .income),
        Category(id: 10, name: "–ü—Ä–µ–º–∏—è", emoji: "üéâ", direction: .income),
        Category(id: 11, name: "–°—Ç–∏–ø–µ–Ω–¥–∏—è", emoji: "üéì", direction: .income),
    ]
    
    private lazy var transactions = [
        Transaction(id: 0, account: bankAccount, category: categories[0],
                    amount: 20000,
                    trasactionDate: Date(),
                    comment: "–ü–ª–∞—Ç–∞ –∑–∞ –∞—Ä–µ–Ω–¥—É",
                    createdAt: Date(),
                    updatedAt: Date()),
        
        Transaction(id: 1, account: bankAccount, category: categories[4],
                    amount: 3500,
                    trasactionDate: Date(),
                    comment: "–ö—É–ø–∏–ª –∫—É—à–∞—Ç—Ü",
                    createdAt: Date(),
                    updatedAt: Date()),
        
        Transaction(id: 2, account: bankAccount, category: categories[5],
                    amount: 2500,
                    trasactionDate: Date(),
                    comment: "–ê–±–æ–Ω–µ–º–µ–Ω—Ç –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª",
                    createdAt: Date(),
                    updatedAt: Date()),
        
        Transaction(id: 3, account: bankAccount, category: categories[9],
                    amount: 50000,
                    trasactionDate: Date(),
                    comment: "–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º–∞–π",
                    createdAt: Date(),
                    updatedAt: Date()),
        
        Transaction(id: 4, account: bankAccount, category: categories[2],
                    amount: 1200,
                    trasactionDate: Date(),
                    comment: "–ö–æ—Ä–º –¥–ª—è —Å–æ–±–∞—á–∫–∏",
                    createdAt: Date(),
                    updatedAt: Date()),
        
        Transaction(id: 5, account: bankAccount, category: categories[10],
                    amount: 15000,
                    trasactionDate: Date(),
                    comment: "–ü—Ä–µ–º–∏—è –∑–∞ —Ö–æ—Ä–æ—à—É—é —Ä–∞–±–æ—Ç—É",
                    createdAt: Date(),
                    updatedAt: Date()),
        
        Transaction(id: 6, account: bankAccount, category: categories[1],
                    amount: 4800,
                    trasactionDate: Date(),
                    comment: "–ö—É–ø–∏–ª —Ñ—É—Ç–±–æ–ª–∫—É –∏ –¥–∂–∏–Ω—Å—ã",
                    createdAt: Date(),
                    updatedAt: Date()),
        
        Transaction(id: 7, account: bankAccount, category: categories[7],
                    amount: 900,
                    trasactionDate: Date(),
                    comment: "–ö—É–ø–∏–ª –≤–∏—Ç–∞–º–∏–Ω—ã –≤ –∞–ø—Ç–µ–∫–µ",
                    createdAt: Date(),
                    updatedAt: Date())
    ]
    
    
    func fetchTransactions(accountId: Int, startDate: Date, endDate: Date) async throws -> [Transaction] {
        return transactions.filter { transaction in
            transaction.trasactionDate >= startDate &&
            transaction.trasactionDate <= endDate
        }
    }
    
    func createTransaction(request: CreateTransactionRequest) async throws -> Transaction {
        guard let category = categories.first(where: {$0.id == request.categoryId}) else {
            throw NSError(domain: "TransactionsService", code: 1, userInfo: [NSLocalizedDescriptionKey: "–î–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤–µ—Ç"])
        }
        let transaction = Transaction(id: Int.random(in: 100...9999),
                                      account: bankAccount,
                                      category: category ,
                                      amount: Decimal(string: request.amount) ?? 0,
                                      trasactionDate: DateStringConverter.date(from: request.transactionDate) ?? Date(),
                                      comment: request.comment, createdAt: Date(),
                                      updatedAt: Date())
        
        guard  !transactions.contains(where: {$0.id == transaction.id}) else {
            throw NSError(domain: "TransactionsService", code: 1, userInfo: [NSLocalizedDescriptionKey: "–î–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤–µ—Ç"])
        }
        
        transactions.append(transaction)
        
        return transaction
    }
    
    func removeTransaction(transactionId: Int) async throws -> Transaction {
        guard transactions.contains(where: {$0.id == transactionId}) else {
            throw NSError(domain: "TransactionsService", code: 1, userInfo: [NSLocalizedDescriptionKey: "–î–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞—Ü–∏–∏ –Ω–µ—Ç"])
        }
        let ind = transactions.firstIndex {$0.id == transactionId}!
        let transaction = transactions.remove(at: ind)
        return transaction
    }
    
    func updateTransaction(request: UpdateTransactionRequest) async throws -> Transaction {
        guard let category = categories.first(where: {$0.id == request.categoryId}) else {
            throw NSError(domain: "TransactionsService", code: 1, userInfo: [NSLocalizedDescriptionKey: "–î–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤–µ—Ç"])
        }
        let transaction = Transaction(id: request.id,
                                      account: bankAccount,
                                      category: category ,
                                      amount: Decimal(string: request.amount) ?? 0,
                                      trasactionDate: DateStringConverter.date(from: request.transactionDate) ?? Date(),
                                      comment: request.comment, createdAt: Date(),
                                      updatedAt: Date())
        
        guard let ind = transactions.firstIndex(where: {$0.id == transaction.id}) else {
            throw NSError(domain: "TransactionsService", code: 1, userInfo: [NSLocalizedDescriptionKey: "–î–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞—Ü–∏–∏ –Ω–µ—Ç"])
        }
        
        transactions[ind] = transaction
        
        return transaction
    }
    
}
